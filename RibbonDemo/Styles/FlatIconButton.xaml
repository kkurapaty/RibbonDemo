<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:RibbonDemo.Controls">

    <ControlTemplate x:Key="FlatIconButtonTemplate" TargetType="{x:Type controls:FlatIconButton}">
        <Grid>
            <Border Margin="2" 
                    Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    BorderBrush="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}">
                <Viewbox RenderTransformOrigin=".5,.5" Stretch="Uniform">
                    <Path x:Name="IconPath" Stretch="Uniform"
                            Data="{Binding IconData, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}"
                            Stroke="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}"
                            StrokeThickness="1" />
                    <Viewbox.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"
                                ScaleY="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </TransformGroup>
                    </Viewbox.RenderTransform>
                </Viewbox>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding HighlightColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FlatIconButtonLeftTemplate" TargetType="{x:Type controls:FlatIconButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Margin="2" 
                    Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    BorderBrush="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}">
                <Viewbox RenderTransformOrigin=".5,.5" Stretch="Uniform">
                    <Path x:Name="IconPath" Stretch="Uniform"
                            Data="{Binding IconData, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}"
                            Stroke="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}"
                            StrokeThickness="1" />
                    <Viewbox.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"
                            ScaleY="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </TransformGroup>
                    </Viewbox.RenderTransform>
                </Viewbox>
            </Border>
            <StackPanel Grid.Column="1" Margin="4,2">
                <ContentPresenter x:Name="ContentPresenter" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  RecognizesAccessKey="True"
                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                  TextBlock.Foreground="{TemplateBinding Foreground}"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding HighlightColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FlatIconButtonRightTemplate" TargetType="{x:Type controls:FlatIconButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" Margin="2" 
                    Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    BorderBrush="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}">
                <Viewbox RenderTransformOrigin=".5,.5" Stretch="Uniform">
                    <Path x:Name="IconPath" Stretch="Uniform"
                            Data="{Binding IconData, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}"
                            Stroke="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}"
                            StrokeThickness="1" />
                    <Viewbox.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"
                        ScaleY="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </TransformGroup>
                    </Viewbox.RenderTransform>
                </Viewbox>
            </Border>
            <StackPanel Grid.Column="0" Margin="4,2">
                <ContentPresenter x:Name="ContentPresenter" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              RecognizesAccessKey="True"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              TextBlock.Foreground="{TemplateBinding Foreground}"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding HighlightColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FlatIconButtonTopTemplate" TargetType="{x:Type controls:FlatIconButton}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition />
            </Grid.RowDefinitions>
            <Border Grid.Row="0" Margin="2" 
                    Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    BorderBrush="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}">
                <Viewbox RenderTransformOrigin=".5,.5" Stretch="Uniform">
                    <Path x:Name="IconPath" Stretch="Uniform"
                            Data="{Binding IconData, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}"
                            Stroke="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}"
                            StrokeThickness="1" />
                    <Viewbox.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"
                        ScaleY="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </TransformGroup>
                    </Viewbox.RenderTransform>
                </Viewbox>
            </Border>
            <StackPanel Grid.Row="1" Margin="2,4">
                <ContentPresenter x:Name="ContentPresenter" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              RecognizesAccessKey="True"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              TextBlock.Foreground="{TemplateBinding Foreground}"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding HighlightColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FlatIconButtonBottomTemplate" TargetType="{x:Type controls:FlatIconButton}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition />
            </Grid.RowDefinitions>
            <Border Grid.Row="1" Margin="2" 
                    Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="{TemplateBinding}" BorderBrush="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}">
                <Viewbox RenderTransformOrigin=".5,.5" Stretch="Uniform">
                    <Path x:Name="IconPath" Stretch="Uniform"
                            Data="{Binding IconData, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}"
                            Stroke="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}"
                            StrokeThickness="1" />
                    <Viewbox.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"
                    ScaleY="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </TransformGroup>
                    </Viewbox.RenderTransform>
                </Viewbox>
            </Border>
            <StackPanel Grid.Row="0" Margin="2,4">
                <ContentPresenter x:Name="ContentPresenter" 
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          RecognizesAccessKey="True"
                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding HighlightColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="IconPath" Property="Fill" Value="{Binding FillColor, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="IconPath" Property="Stroke" Value="{Binding OutlineColor, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="FlatIconButton.Style" TargetType="{x:Type controls:FlatIconButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template" Value="{StaticResource FlatIconButtonTemplate}"/>
    </Style>

    <Style BasedOn="{StaticResource FlatIconButton.Style}" TargetType="{x:Type controls:FlatIconButton}" />
    <Style x:Key="FlatIconButtonLeft.Style"  BasedOn="{StaticResource FlatIconButton.Style}" TargetType="{x:Type controls:FlatIconButton}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template" Value="{StaticResource FlatIconButtonLeftTemplate}"/>
    </Style>
    <Style x:Key="FlatIconButtonRight.Style"  BasedOn="{StaticResource FlatIconButton.Style}" TargetType="{x:Type controls:FlatIconButton}">
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template" Value="{StaticResource FlatIconButtonRightTemplate}"/>
    </Style>
    <Style x:Key="FlatIconButtonTop.Style"  BasedOn="{StaticResource FlatIconButton.Style}" TargetType="{x:Type controls:FlatIconButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template" Value="{StaticResource FlatIconButtonTopTemplate}"/>
    </Style>
    <Style x:Key="FlatIconButtonBottom.Style"  BasedOn="{StaticResource FlatIconButton.Style}" TargetType="{x:Type controls:FlatIconButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="Template" Value="{StaticResource FlatIconButtonBottomTemplate}"/>
    </Style>

</ResourceDictionary>