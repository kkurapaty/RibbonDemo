<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:RibbonDemo.Controls"
                    xmlns:ext="clr-namespace:RibbonDemo.Extensions">

    <Style TargetType="{x:Type controls:VectorIcon}">
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:VectorIcon}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Viewbox FlowDirection="{TemplateBinding FlowDirection}" Stretch="Uniform"
                                 Width="{TemplateBinding Width}" 
                                 Height="{TemplateBinding Height}"
                                 RenderTransformOrigin="0.5,0.5">
                            <Path Data="{Binding Data, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Uniform"/>
                            <Viewbox.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ScaleY="{Binding Scale, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </TransformGroup>
                            </Viewbox.RenderTransform>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Popup">
        <Setter Property="PopupAnimation" Value="Slide"/>
        <Setter Property="AllowsTransparency" Value="False"/>
        <Setter Property="IsHitTestVisible" Value="True"/>
        <Setter Property="Margin" Value="6,4"/>
        <Setter Property="Placement" Value="Bottom"/>
        <Setter Property="StaysOpen" Value="False"/>
    </Style>

    <DropShadowEffect x:Key="BlackDropShadowEffectStyle" Color="#F5F5F5" Opacity="0.6" ShadowDepth="0" BlurRadius="8" Direction="270" />

    <Style TargetType="{x:Type controls:FilterButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="Background" Value="#0000FF"/>
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:FilterButton}">
                    <Border Background="{TemplateBinding Background}" Margin="2"
                            BorderBrush="#F5F5F5"
                            BorderThickness="0.75" CornerRadius="3">
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <controls:VectorIcon x:Name="IconLeft" Grid.Row="0" Grid.Column="0" Kind="{TemplateBinding LeftIcon}" Margin="4" Height="16" Width="16" RenderTransformOrigin="0.5,0.5"/>
                            <controls:VectorIcon x:Name="IconRight" Grid.Row="0" Grid.Column="2" Kind="{TemplateBinding RightIcon}" Margin="4" Height="16" Width="16" RenderTransformOrigin="0.5,0.5"/>
                            <ContentPresenter Grid.Row="0" Grid.Column="1" Content="{TemplateBinding HeaderText}" 
                                              HorizontalAlignment="Stretch" VerticalAlignment="Center"
                                              Margin="2"/>
                            <Border Grid.Column="0" Grid.ColumnSpan="3" x:Name="PART_Container" CornerRadius="3" Padding="3" MinHeight="20" MinWidth="20"
                                    Effect="{StaticResource BlackDropShadowEffectStyle}">
                                <Popup x:Name="PopupBox" 
                                       ext:PopupExtensions.AutoHideOnLinkClick="True"
                                       IsOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=ToggleButton}}">
                                    <ContentControl Content="{TemplateBinding DropdownContent}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                </Popup>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding ElementName=PopupBox, Path=IsOpen}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Angle" TargetName="IconRight" Value="180"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked}" Value="False" />
                                <Condition Binding="{Binding ElementName=PopupBox, Path=IsOpen}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Angle" TargetName="IconRight" Value="0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>